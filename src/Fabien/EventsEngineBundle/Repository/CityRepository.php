<?php

namespace Fabien\EventsEngineBundle\Repository;
use Doctrine\ORM\EntityRepository;
/**
 * CityRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CityRepository extends \Doctrine\ORM\EntityRepository
{
  public function getCityOrder(){
      return $this->createQueryBuilder('c')

        ->orderBy("c.title",'ASC');

  }


  public function getCitiesFromCountry($countryId="",$mode=""){
    $qb = $this->createQueryBuilder('c')
        ->join('c.state', 'state')
        ->addSelect('state')
        ->join('state.country', 'country')
        ->addSelect('country')
        ;

    if($mode=="active"){
      $qb->join('c.events', 'event')
          ->addSelect('event')
          ->andWhere('event.publish = :publish')
          ->setParameter('publish', 1)
          ->join('event.dates','d')
          ->andWhere("d.end>=:now")
            ->setParameter('now', new \DateTime('now'))
          ;
    }

    if($countryId!=""){
      $tabCountry=array($countryId);
    }else{
      $tabCountry=array(75);
    }

      $qb->andWhere("country.id in (:country)")
        ->setParameter('country', $tabCountry)
        ->orderBy("c.title",'ASC')
        ;
    return $qb;

  }



  public function getCountryCities($countrySlug,$orderField="city.title",$order="ASC",$limit=null){
    $qb = $this->createQueryBuilder('city')
        ->join('city.state','state')
        //->addSelect('state')
        ->join('state.country', 'country')
        //->addSelect('city')
        ->join('city.events', 'evt')
        //->addSelect('evt')
        ->addSelect('city.title,city.slug','count(evt) as cptevt')
        ->join('evt.dates','d')
        ->andWhere("country.slug=:slug")
          ->setParameter('slug', $countrySlug)
        ->andWhere("d.end>=:now")
          ->setParameter('now', new \DateTime('now'))
        ->orderBy($orderField,$order)
        ->groupBy("city.id")
        ;

    if($limit)$qb->setMaxResults($limit);

    return $qb
          ->getQuery()
          ->getResult()
        ;
  }


public function listCityState($state){
  $qb = $this->createQueryBuilder('city')
      ->join('city.state','state')
      ->andWhere("state.id=:id")
        ->setParameter('id', $state->getId())
      ->orderBy("city.title","ASC")
      ;

  return $qb
        ->getQuery()
        ->getResult()
      ;
}


public function searchCity($stringCity='',$champ='title')
{

  $city=$this->createQueryBuilder('c')
        ->andWhere("c.$champ LIKE :stringCity")
          ->setParameter('stringCity', "".$stringCity."")
        ->setMaxResults(1)
        ->getQuery()
        ->getOneOrNullResult();
      ;


  return $city;
}





public function findCity($stringCity='')
{
  $qb = $this->createQueryBuilder('c')
        ->join('c.state', 'state')
        ->addSelect('state')
        ->join('state.country', 'country')
        ->addSelect('country')
        ->andWhere("c.title LIKE :stringCity")
          ->setParameter('stringCity', "".$stringCity."%")
      ;

  return $qb;
}

  public function getAllActiveCity(){

    $qb = $this->createQueryBuilder('c')
        ->join('c.events', 'evt')
        ->addSelect('evt')
        ->join('c.state', 'state')
        ->addSelect('state')
        ->join('state.country', 'ctry')
        ->addSelect('ctry')
        ->join('evt.dates','d')
        ->andWhere("d.end>=:now")
          ->setParameter('now', new \DateTime('now'))
        ->andwhere("evt.publish=1")
        ->orderBy("c.title",'ASC')
        ;

    return $qb
      ->getQuery()
      ->getResult()
    ;
  }


  public function getUsedCities(){

    $qb = $this->createQueryBuilder('c')
        ->join('c.events', 'evt')
        ->addSelect('evt')
        ->join('c.state', 'state')
        ->addSelect('state')
        ->join('state.country', 'ctry')
        ->addSelect('ctry')
        ->join('evt.dates','d')
        ->orderBy("c.title",'ASC')
        ;

    return $qb
      ->getQuery()
      ->getResult()
    ;
  }


public function countDates($city){
  $qb = $this->createQueryBuilder('c')
      ->join('c.events', 'evt')
      ->join('evt.dates','d')
      ->Select('count(d) as cptevt')
      ->andWhere("d.end>=:now")
        ->setParameter('now', new \DateTime('now'))
      ->andWhere("c=:city")
        ->setParameter('city', $city)
      ;

  return $qb
    ->getQuery()
    ->getSingleScalarResult()
  ;
}

  public function getTopCities($limit=10){
    $qb = $this->createQueryBuilder('c')
        ->join('c.state', 'state')
        ->addSelect('state.id')
        ->join('state.country', 'country')
        ->addSelect('country.sortname,country.slug,country.title')
        ->join('c.events', 'evt')
        ->addSelect('c.title,c.slug,count(evt) as cptevt')
        ->join("evt.type_event","type")
        /*->andWhere("type.id != :cours")
          ->setParameter('cours', 8)*/
        ->join('evt.dates','d')
        ->andWhere("d.end>=:now")
          ->setParameter('now', new \DateTime('now'))
        ->andWhere("c.title != 'Inconnue'")
        ->orderBy("cptevt",'DESC')
        ;

    return $qb
      ->groupBy("c.id")
      ->setMaxResults($limit)
      ->getQuery()
      ->getResult()
    ;
  }

}
