<?php

namespace Fabien\EventsEngineBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;

/**
 * EventRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EventRepository extends \Doctrine\ORM\EntityRepository
{

  public function getEventsQuery($city=false,$type=false,$period=false,$region=false,$country=false,$orderField="d.start",$order="ASC",$limit=0,$offset=0,$published=1,$valorisation=0,$start=false,$end=false,$limitNbEvent=false){

      $operation=$this->createQueryBuilder('a')
        ->join("a.dates","d")
        ->Where("d.start>=:now")
          ->setParameter('now', new \DateTime('now'))
      ;

      if($limitNbEvent==true){
        $operation->andWhere("a.date_creation >= :limitDays ")
          ->setParameter('limitDays', new \DateTime('-10days'));
      }

      if($period!=false){

        $operation->andWhere("d.end BETWEEN :datedebut AND :datefin ");

        switch ($period){
          case "month":
                $operation->setParameter('datedebut',new \DateTime('now'));
                $operation->setParameter('datefin',new \DateTime('+30days'));
                break;
          case "all":
                  $operation->setParameter('datedebut',new \DateTime('now'));
                  $operation->setParameter('datefin',new \DateTime('+720days'));
                  break;
          default :
                $operation->setParameter('datedebut',new \DateTime('now'));
                $operation->setParameter('datefin',new \DateTime('+7days'));
              break;
        }

        $operation->orWhere(" :datedebut BETWEEN d.start AND d.end ");
        $operation->setParameter('datedebut',new \DateTime('now'));
      }

      if($city!=false and $city!=''){
        $operation->andWhere('a.city=:city')
          ->setParameter('city',$city);
      }

      if($published!="all"){
        $operation->andWhere('a.publish=:publish')
          ->setParameter('publish',$published);
      }

      if($valorisation==1){
        $operation->andWhere('a.valorisation=:valo')
          ->setParameter('valo',$valorisation);
      }

      if($type!=false and $type!=''){
        //création de l'expression OR
        $orModule = $operation->expr()->orx();
        foreach($type as $t){
            $orModule->add($operation->expr()->eq('a.type_event', $t));
        }

        //Ajout de l'expression à la requête
        $operation->andWhere($orModule);

      }



      if($region!=false and $region!=''){
        $operation->join("a.city","city")
                  ->join("city.state","state")
                  ->andWhere("state=:sregion")
                    ->setParameter("sregion",$region)
          ;
      }

      if($country!=false and $country!=''){
        $operation->join("a.city","city")
                  ->join("city.state","state")
                  ->join("state.country","ctry")
                  ->andWhere("ctry=:country")
                    ->setParameter("country",$country)
          ;
      }

      if($orderField){
        $operation->andWhere("a.$orderField is not null");

        if($orderField=="dateInscription"){
          $operation->andWhere("a.dateInscription>=:now")
            ->setParameter('now', new \DateTime('now'))
            ;
        }
      }

      if($limit>0)$operation->setMaxResults($limit);

      return  $operation
              ->orderBy("a.$orderField",$order)
              ->setFirstResult($offset)
              ->getQuery()
              ->getResult()
            ;
  }


public function getUpdatedEvent($days="3",$offset=0)
{
  $operation=$this->createQueryBuilder('a')
    ->join("a.type_event","t")
    ->join("a.dates","d")
    ->Where("d.end>=:now")
      ->setParameter('now', new \DateTime('now'))
	  
  ;

  $limit=10;

  $operation->andWhere("a.origin != :orginie  ");
  $operation->setParameter('orginie',"direct");
  
  $operation->andWhere("a.date_update <= :datemaj  ");
  $operation->setParameter('datemaj',new \DateTime('-'.$days.'days'));
  if($offset!="no"){
    $operation->setMaxResults($limit);
    //$operation->setFirstResult($offset);
  }



  return  $operation
          ->getQuery()
          ->getResult()
        ;
}

  public function getLastEvents($days,$type=array())
  {
    $operation=$this->createQueryBuilder('a')
      ->join("a.type_event","t")
      ->join("a.dates","d")
      ->Where("d.end>=:now")
        ->setParameter('now', new \DateTime('now'))
    ;



      //création de l'expression OR
      $orModule = $operation->expr()->orx();
      foreach($type as $t){
          $orModule->add($operation->expr()->eq('a.type_event', $t));
      }
      $operation->andWhere($orModule);



    $operation->andWhere('a.publish=:publish')
      ->setParameter('publish',1);

    $operation->andWhere("a.date_creation BETWEEN :datedebut AND :datefin ");
          $operation->setParameter('datefin',new \DateTime('now'));
          $operation->setParameter('datedebut',new \DateTime('-'.$days.'days'));


    return  $operation
            ->orderBy("t.title asc, d.start","desc")
            ->getQuery()
            ->getResult()
          ;

  }

  public function countTotalEvents(){
    $operation=$this->createQueryBuilder('a')
      ->select('COUNT(a)')
      ->join("a.dates","d")
      ->Where("d.end>=:now")
        ->setParameter('now', new \DateTime('now'))
    ;

    $operation->andWhere('a.publish=:publish')
      ->setParameter('publish',1);


    $count = $operation->getQuery()->getSingleScalarResult();
    return  $count;

  }


  public function countAddedToday(){
    $now=new \DateTime('now');
    $operation=$this->createQueryBuilder('a')
      ->select('COUNT(a)')
      ->join("a.dates","d")
      ->Where("d.end>=:now")
        ->setParameter('now', new \DateTime('now'))
      ->andWhere("a.date_creation between :now and :endday")
        ->setParameter('now', $now->format("Y-m-d 00:00:01"))
        ->setParameter('endday', $now->format("Y-m-d 23:59:59"))
    ;

    $operation->andWhere('a.publish=:publish')
      ->setParameter('publish',1);


    $count = $operation->getQuery()->getSingleScalarResult();
    return  $count;

  }

  public function countEventsToday(){
    $now=new \DateTime('now');
    $operation=$this->createQueryBuilder('a')
      ->select('COUNT(a)')
      ->join("a.dates","d")
      ->Where("d.start between :now and :endday")
        ->setParameter('now', $now->format("Y-m-d 00:00:01"))
        ->setParameter('endday', $now->format("Y-m-d 23:59:59"))
    ;

    $operation->andWhere('a.publish=:publish')
      ->setParameter('publish',1);


    $count = $operation->getQuery()->getSingleScalarResult();
    return  $count;

  }




  public function existFB($queryString){

    $operation= $this->createQueryBuilder('a')
                ->select('COUNT(a)')
                ->Where("a.urlFb like :recherche")
                ->setParameter("recherche",'%'.$queryString.'%')
                ;

    $count = $operation->getQuery()->getSingleScalarResult();

    return  $count;
  }

  public function getByFbId($queryString){

    $operation= $this->createQueryBuilder('a')
                ->Where("a.urlFb like :recherche")
                ->setParameter("recherche",'%'.$queryString.'%')
                ;

    $result = $operation->getQuery()->getSingleResult();

    return  $result;
  }


public function getOrphanedEvents(){
  $q2 = $this->createQueryBuilder('evt')
      ->join("evt.dates","d")
      ->distinct("evt.id");

  $query = $this->createQueryBuilder('evt2');
  $query->where($query->expr()->notIn('evt2.id', $q2->getDQL()));

  $linked = $query
               ->getQuery()
               ->getResult();

  return $linked;

}

public function  getEventsWithDates(){
  $q2 = $this->createQueryBuilder('evt')
      ->select('evt.id')
      ->join("evt.dates","d")
      ->distinct()
      ;

  $linked = $q2
               ->getQuery()
               ->getResult();

  return $linked;
}






}
