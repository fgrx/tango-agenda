<?php

namespace Fabien\EventsEngineBundle\Repository;

/**
 * DateRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DateRepository extends \Doctrine\ORM\EntityRepository
{

  public function getDatesQuery($city=false,$type=false,$period="week",$region=false,$country=false,$fieldOrder="d.start",$order="ASC",$limit=0,$offset=0,$published=1,$valorisation=0,$startDate="",$endDate=""){

      $nowDate=new \DateTime('now');


      $operation=$this->createQueryBuilder('d')
        ->join("d.event","e")
      ;

      if($startDate){
        if(!$endDate)$endDate=new \DateTime("now +700 Days");

        $operation->andWhere("d.end BETWEEN :datedebut AND :datefin ");
        $operation->setParameter('datedebut',$startDate);
        $operation->setParameter('datefin',$endDate);
      }else{
        $operation->andWhere("d.end > :now ");
        $operation->setParameter('now', $nowDate);
      }




      if($published!="all"){
        $operation->andWhere('e.publish=:publish')
          ->setParameter('publish',$published);
      }

      if($valorisation>0){
        $operation->andWhere('e.valorisation=:valo')
          ->setParameter('valo',$valorisation);
      }

      if($type!=false){
        //création de l'expression OR
        $orModule = $operation->expr()->orx();
        foreach($type as $t){
            $orModule->add($operation->expr()->eq('e.type_event', $t));
        }

        //Ajout de l'expression à la requête
        $operation->andWhere($orModule);

      }



      if($region!=false){
        $operation->join("e.city","city")
                  ->join("city.state","state")
                  ->andWhere("state=:sregion")
                    ->setParameter("sregion",$region)
          ;
      }

      if($country!=false){
        $operation->join("e.city","city")
                  ->join("city.state","state")
                  ->join("state.country","ctry")
                  ->andWhere("ctry=:country")
                    ->setParameter("country",$country)
          ;
      }



      if($city!=false){
		
        //calcul des villes 20km a la ronde
        $lat=$city->getLat();
        $lng=$city->getLng();

        // we'll want everything within, say, 10km distance
        $distance = 20;

        // earth's radius in km = ~6371
        $radius = 6371;

        // latitude boundaries
        $maxlat = $lat + rad2deg($distance / $radius);
        $minlat = $lat - rad2deg($distance / $radius);

        // longitude boundaries (longitude gets smaller when latitude increases)
        $maxlng = $lng + rad2deg($distance / $radius / cos(deg2rad($lat)));
        $minlng = $lng - rad2deg($distance / $radius / cos(deg2rad($lat)));

		$operation->andWhere('e.city=:city or (city.lat BETWEEN :minlat AND :maxlat and city.lng BETWEEN :minlng AND :maxlng)')
          ->setParameter('city',$city)
		  ->setParameter('minlat',$minlat)
          ->setParameter('maxlat',$maxlat)
		  ->setParameter('minlng',$minlng)
          ->setParameter('maxlng',$maxlng)
		;
		
		/*
        $operation->join("e.city","city")
                  ->andWhere('city.lat BETWEEN :minlat AND :maxlat')
                      ->setParameter('minlat',$minlat)
                      ->setParameter('maxlat',$maxlat)
                  ->andWhere('city.lng BETWEEN :minlng AND :maxlng ')
                      ->setParameter('minlng',$minlng)
                      ->setParameter('maxlng',$maxlng)
					

          ;
		*/

        
        
        
      }

      if($fieldOrder!=""){

        if($fieldOrder=="e.dateInscription"){
          $operation->andWhere("e.dateInscription>=:now")
            ->setParameter('now', new \DateTime('now'))
            ;
        }
      }else{
        $fieldOrder="d.start";
      }

      if($limit>0)$operation->setMaxResults($limit);

      return  $operation
              ->orderBy($fieldOrder,$order)
              ->setFirstResult($offset)
              ->getQuery()
              ->getResult()
            ;

    }


    public function getOtherDates($targetEvent){

      $operation=$this->createQueryBuilder('d')
        ->Where("d.start>:now")
          ->setParameter('now', new \DateTime('now'))
        ->join("d.event","evt")
        ->andWhere("evt.id = :targetEvent")
          ->setParameter("targetEvent",$targetEvent)
        ->orderBy("d.start","ASC")
      ;

      return  $operation
              ->getQuery()
              ->getResult()
            ;
    }

    public function getOldDates(){
      $operation=$this->createQueryBuilder('d')
        ->Where("d.end<:now")
          ->setParameter('now', new \DateTime('now'))
      ;

      return  $operation
              ->getQuery()
              ->getResult()
            ;
    }
}
