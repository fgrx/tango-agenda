<?php

namespace Fabien\EventsEngineBundle\Repository;

/**
 * DateRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DateRepository extends \Doctrine\ORM\EntityRepository
{

  public function getDatesQuery($city=false,$type=false,$period="week",$region=false,$country=false,$fieldOrder="d.start",$order="ASC",$limit=0,$offset=0,$published=1,$valorisation=0,$startDate="",$endDate=""){

      $nowDate=new \DateTime('now');

      if($endDate=="")$endDate=new \DateTime("now +700 Days");
      if($startDate=="")$startDay=new \DateTime("now +700 Days");


      $operation=$this->createQueryBuilder('d')
        ->join("d.event","e")
        ->Where("d.end>=:now")
          ->setParameter('now', $nowDate)
      ;

      //$operation->andWhere("d.end BETWEEN :datedebut AND :datefin ");

      $operation->andWhere("d.end > :now ");
        $operation->setParameter('now', $nowDate);
      //$operation->setParameter('datedebut',$startDate);

      //$operation->setParameter('datefin',$endDate);


      if($published!="all"){
        $operation->andWhere('e.publish=:publish')
          ->setParameter('publish',$published);
      }

      if($valorisation>0){
        $operation->andWhere('e.valorisation=:valo')
          ->setParameter('valo',$valorisation);
      }

      if($type!=false){
        //création de l'expression OR
        $orModule = $operation->expr()->orx();
        foreach($type as $t){
            $orModule->add($operation->expr()->eq('e.type_event', $t));
        }

        //Ajout de l'expression à la requête
        $operation->andWhere($orModule);

      }




      if($region!=false){
        $operation->join("e.city","city")
                  ->join("city.state","state")
                  ->andWhere("state=:sregion")
                    ->setParameter("sregion",$region)
          ;
      }

      if($country!=false){
        $operation->join("e.city","city")
                  ->join("city.state","state")
                  ->join("state.country","ctry")
                  ->andWhere("ctry=:country")
                    ->setParameter("country",$country)
          ;
      }


      if($city!=false){
        $operation->andWhere('e.city=:city')
          ->setParameter('city',$c);
      }

      if($fieldOrder!=""){

        if($fieldOrder=="e.dateInscription"){
          $operation->andWhere("e.dateInscription>=:now")
            ->setParameter('now', new \DateTime('now'))
            ;
        }
      }else{
        $fieldOrder="d.start";
      }

      if($limit>0)$operation->setMaxResults($limit);

      return  $operation
              ->orderBy($fieldOrder,$order)
              ->setFirstResult($offset)
              ->getQuery()
              ->getResult()
            ;

    }


    public function getOldDates(){
      $operation=$this->createQueryBuilder('d')
        ->Where("d.end<:now")
          ->setParameter('now', new \DateTime('now'))
      ;

      return  $operation
              ->getQuery()
              ->getResult()
            ;
    }
}
